[env]
DEV = true
RELEASE = false
TARGET_OS = "unknown"

[env.release]
DEV = false
RELEASE = true

[config]
default_to_workspace = false
skip_core_tasks = true

[tasks.default]
dependencies = ["build"]

[tasks.build]
dependencies = ["build-core"]

[tasks.build-core]
args = ["build", "-p", "dart-sys"]
command = "cargo"

[tasks.format]
category = "Format"
dependencies = ["rustfmt", "dart-format"]


[tasks.dart-format]
windows.command = "dart.bat"
linux.command = "dart"
mac.command = "dart"
args = ["format", "."]

[tasks.rustfmt]
args = ["fmt", "--all", "--", "--emit=files"]
category = "Format"
command = "cargo"
description = "Format Rust code"
install_crate = "rustfmt"

[tasks.clean]
dependencies = ["cargo-clean"]

[tasks.cargo-clean]
args = ["clean"]
command = "cargo"

[tasks.test]
args = ["test"]
category = "Test"
command = "cargo"

[tasks.lint]
category = "Lint"
dependencies = ["clippy"]
description = "Runs all linters"

[tasks.lint-fix]
category = "Lint"
dependencies = ["clippy-fix"]

[tasks.clippy-fix]
args = [
	# "+nightly",
	"clippy",
	"--fix",
	"--all-targets",
	"--all-features",
	"--",
	"-D",
	"clippy::await_holding_refcell_ref",
	"-D",
	"clippy::missing_safety_doc",
	"-D",
	"clippy::undocumented_unsafe_blocks",
]
category = "Lint"
command = "cargo"
description = "Runs the rust linter"
# install_crate = "clippy"

[tasks.clippy]
args = [
	# "+nightly",
	"clippy",
	"--all-targets",
	"--all-features",
	"--",
	"-D",
	"clippy::await_holding_refcell_ref",
	"-D",
	"clippy::missing_safety_doc",
	"-D",
	"clippy::undocumented_unsafe_blocks",
]
category = "Lint"
command = "cargo"
description = "Runs the rust linter"
# install_crate = "clippy"
